%%
%% This is file `lisp.sty'.
%%
%%  License: Modified BSD - see LICENSE file
%%
%% input buffer and read function
\def\@read@buffer{}
\def\@currentread{}
\def\@eof{\@@eof}
\def\@dummy{\@@dummy}
\def\setinputbuffer#1{\gdef\@read@buffer{#1}}
\def\readchar{%
\ifx\@eof\@read@buffer
  \gdef\@currentread{\@@eof}%
\else
\expandafter\@car@buffer\@read@buffer\relax\fi}
\def\@car@buffer#1#2\relax{%
\gdef\@currentread{#1}\gdef\@read@buffer{#2}}
\def\unreadchar{\ifx\@eof\@currentread
\else\expandafter\expandafter\expandafter\gdef\expandafter\expandafter\expandafter\@read@buffer\expandafter\expandafter\expandafter{\expandafter\@currentread\@read@buffer}\gdef\@currentread{}\fi}

%% assoc \cs -> value
% constructor
\def\makeassoc#1{\def#1{}}
% add member
\def\addassoc#1#2#3{%#1(assoc),#2(\cs),#3(value)
\gdef\@temp@add{#3}%
\expandafter\expandafter\expandafter\gdef\expandafter\expandafter
\expandafter#1\expandafter\expandafter\expandafter{%
\expandafter\expandafter\expandafter#2\expandafter\expandafter\expandafter{\expandafter\@temp@add\expandafter}#1}}
% remove member. It cause error if there is no member
\def\rmassoc#1#2{% #1(assoc), #2(\cs)
\def\@rmassoc##1#2##2##3\relax{##1##3}%
\expandafter\expandafter\expandafter\gdef\expandafter\expandafter\expandafter#1\expandafter\expandafter\expandafter{\expandafter\@rmassoc#1\relax}}
% exist?
\def\ifmemassoc#1#2{%
\expandafter\@ifmemassoc\expandafter#2#1\relax}
\def\@ifmemassoc#1#2\relax{\ifx\@dummy#2\@dummy\let\@next\@iffalse\else\def\@next{\@@ifmemassoc#1#2\relax}\fi\@next}
\def\@@ifmemassoc#1#2#3#4\relax{%
\begingroup\def#1{\@@target}%
\ifx#1#2\endgroup\let\@next\@iftrue\else\endgroup\def\@next{\@ifmemassoc#1#4\relax}\fi\@next}
\def\@iffalse{\iffalse}
\def\@iftrue{\iftrue}
% get It cause error if there is no member
\def\getassoc#1#2#3{%
\def\@getassoc##1#2##2##3\relax{\gdef#3{##2}\relax}\expandafter\@getassoc#1\relax}
% show
\def\showassoc#1{\expandafter\@showassoc#1\relax}
\def\@showassoc#1\relax{\ifx\@dummy#1\@dummy
\let\@next\relax\else\def\@next{\@@showassoc#1\relax}\fi\@next}
\def\@@showassoc#1#2#3\relax{\string#1:#2,\ifx\@dummy#3\@dummy\else
\@showassoc#3\relax\fi}



%% test code 2 -- LISP parser
%% symbol is a \cs --> \Symbol{\cs}
%% a value is a string --> \Value{string}
%% escap char is \@escapechar
%% cons cell is (a.b), both a and b are S-exp. --> \Cons{a}{b}
%% nil is () --> \Nil
%% \quote -> \Quote
%% \lambda -> \Lambda
%% -- if parse fail is happen, the result is \Error

% interface
\def\@lisp@empty{}
\def\lispinterpl#1{\begingroup%
  \gdef\@read@buffer{#1\@@eof\@@eof}\@lispinterpl}
\def\@lispinterpl{%
  \readchar
  \ifx\@currentread\@eof
    \def\@next{\endgroup}%
  \else
    \def\@next{%
       \unreadchar
       \@lispread\@lisp@input
       \lispeval\@lisp@input\@lisp@result
       \@lispinterpl}\fi
  \@next}

% reader
\newcount\@malloc
\newcount\@code
\def\lispread#1#2{\gdef\@read@buffer{#2\@@eof\@@eof}\@lispread#1}
\def\@lispread#1{%
\begingroup
  \readchar
  \if(\expandafter\noexpand\@currentread
   \readchar
   \if\expandafter\noexpand\@currentread)
     \gdef#1{\Nil{}}%
   \else
     \unreadchar
     \@lispread\@temp@i
     \readchar
     \if.\expandafter\noexpand\@currentread
       \let\@save@temp\@temp@i
       \@lispread\@temp@ii
       \let\@temp@i\@save@temp
       \readchar
       \if)\expandafter\noexpand\@currentread
         \expandafter\global\expandafter
           \let\csname car\the\@malloc\endcsname\@temp@i
         \expandafter\global\expandafter
           \let\csname cdr\the\@malloc\endcsname\@temp@ii
         \xdef#1{\noexpand\Cons{\the\@malloc}}%
         \global\advance\@malloc1
       \else
         \gdef#1{\Error{}}%
       \fi
     \else\if)\expandafter\noexpand\@currentread
       \expandafter\global\expandafter
         \let\csname car\the\@malloc\endcsname\@temp@i
       \expandafter\gdef\csname cdr\the\@malloc\endcsname{\Nil{}}%
       \xdef#1{\noexpand\Cons{\the\@malloc}}%
       \global\advance\@malloc1
     \else
       \unreadchar
       \expandafter\gdef
       \expandafter\@read@buffer
       \expandafter{%
       \expandafter(\@read@buffer}%
       \let\@save@temp\@temp@i
       \@lispread\@temp@ii
       \let\@temp@i\@save@temp
       \expandafter\global\expandafter
         \let\csname car\the\@malloc\endcsname\@temp@i
       \expandafter\global\expandafter
         \let\csname cdr\the\@malloc\endcsname\@temp@ii
       \xdef#1{\noexpand\Cons{\the\@malloc}}%
       \global\advance\@malloc1
     \fi\fi
   \fi
  \else\ifcat\relax\expandafter\noexpand\@currentread
     \expandafter\gdef\expandafter#1\expandafter{%
     \expandafter\Symbol\expandafter{\@currentread}}%
  \else\if'\expandafter\noexpand\@currentread
     \expandafter\@read@string\expandafter#1\@read@buffer\@@end
  \else\if/\expandafter\noexpand\@currentread
     \readchar
     \if t\expandafter\noexpand\@currentread
       \gdef#1{\Bool{true}}%
     \else\if f\expandafter\noexpand\@currentread
       \gdef#1{\Bool{false}}%
     \fi\fi
  \else
    \unreadchar
    \expandafter\@read@num\expandafter#1\@read@buffer\@@end
  \fi\fi\fi\fi
\endgroup}
\def\@read@num#1#2~#3\@@end{%
  \@@read@num#1#2.\@@end
  \gdef\@read@buffer{#3}}
\def\@@read@num#1#2.#3\@@end{%
  \ifx\@dummy#3\@dummy
   \gdef#1{\Int{#2}}%
  \else
   \gdef#1{\Float{#2.#3}}%
  \fi}
\def\@read@string#1#2'#3\@@end{%
  \gdef#1{\Value{#2}}%
  \gdef\@read@buffer{#3}}

% eval
%% write buffer
\gdef\@temp@write@buffer{}
\makeassoc\@globalenv % global environment
% init global environment
\addassoc\@globalenv\quote{\Quote{}}%
\addassoc\@globalenv\lambda{\Lambda{}}
\addassoc\@globalenv\define{\Define{}}
\addassoc\@globalenv\if{\If{}}

% implemeted functions
\newcount\@temp@count


\def\@get@car#1#2#3{\ifx#1\Cons \@@get@car{#2}#3\else \gdef#3{\Error}\fi}
\def\@get@cdr#1#2#3{\ifx#1\Cons \@@get@cdr{#2}#3\else \gdef#3{\Error}\fi}

\def\@@get@car#1#2{%
  \expandafter\expandafter\expandafter\gdef
  \expandafter\expandafter\expandafter#2%
  \expandafter\expandafter\expandafter{\csname car#1\endcsname}}
\def\@@get@cdr#1#2{%
  \expandafter\expandafter\expandafter\gdef
  \expandafter\expandafter\expandafter#2%
  \expandafter\expandafter\expandafter{\csname cdr#1\endcsname}}

\addassoc\@globalenv\car{\Func{\@car@lisp}}
\def\@car@lisp#1#2#3{\@get@car#2{#3}#1}



\addassoc\@globalenv\cons{\Func{\@make@cons}}
\def\@make@cons#1#2#3#4#5{%
   \expandafter\gdef\csname car\the\@malloc\endcsname{#2{#3}}%
   \expandafter\gdef\csname cdr\the\@malloc\endcsname{#4{#5}}%
   \xdef#1{\noexpand\Cons{\the\@malloc}}%
   \global\advance\@malloc1\relax}

\addassoc\@globalenv\length{\Func{\@lisp@length}}
\def\@lisp@length#1#2{%
  \ifx#2\Nil
    \expandafter\def
    \expandafter\@next
    \expandafter{%
      \expandafter\gdef
      \expandafter#1%
      \expandafter{%
        \expandafter\Int
        \expandafter{\the\@temp@count}}}%
  \else
    \def\@next{\advance\@temp@count1\relax
      \@@lisp@length#1}%
  \fi\@next}
\def\@@lisp@length#1#2{%
  \expandafter\expandafter\expandafter\@lisp@length
  \expandafter\expandafter\expandafter#1\csname cdr#2\endcsname}

%arithmetical functions
\newskip\@temp@skipi
\newskip\@temp@skipii
\begingroup
\lccode`\;=`\p
\lccode`\:=`\t
\lowercase{\endgroup\def\my@strip@pt#1;:{\Value{#1}}}
\def\@dummy{\@@dummy}
\addassoc\@globalenv\+{\Func{\@arith@plus}}

% connection to TeX world
\addassoc\@globalenv\print{\Func{\@tex@print}}
\def\@tex@print#1#2{%
  \gdef#1{\Nil}%
  \let\@print@next\relax
  \ifx#2\Value
     \let\@print@next\@print@single
  \else\ifx#2\Int
     \let\@print@next\@print@single
  \else\ifx#2\Float
     \let\@print@next\@print@single
  \else\ifx#2\True
     \xdef\@temp@write@buffer{\@temp@write@buffer /t}%
  \else\ifx#2\False
     \xdef\@temp@write@buffer{\@temp@write@buffer /f}%
  \fi\fi\fi\fi\fi\@print@next}
\def\@print@single#1{\xdef\@temp@write@buffer{\@temp@write@buffer#1}}




\def\@defined@datatype{Cons,Symbol,Value,Nil,Func,Closure,Int,Float,Bool}
\def\@defined@specialform{Lambda,Quote,Define,If}

\edef\@defined@lisp@on@tex{\@defined@datatype,\@defined@specialform}
\def\@save@latex@world{%
   \@for\@@temp@save:=\@defined@lisp@on@tex\do{%
        \aftergroup\let
        \expandafter\aftergroup\csname @\@@temp@save\endcsname
        \expandafter\aftergroup\csname\@@temp@save\endcsname
        \aftergroup\def
        \expandafter\aftergroup\csname\@@temp@save\endcsname
        \aftergroup{%
          \expandafter\aftergroup\csname @\@@temp@save\endcsname
        \aftergroup}}}
\def\@restore@latex@world{%
   \@for\@@temp@save:=\@defined@lisp@on@tex\do{%
      \aftergroup\let
        \expandafter\aftergroup\csname\@@temp@save\endcsname
        \expandafter\aftergroup\csname @\@@temp@save\endcsname}}


\def\lispeval#1#2{% #1 : \cs -> S-exp, #2 : target register
  \gdef\@temp@write@buffer{}%
  {\@save@latex@world}%
  \expandafter\@eval#1{}#2%
  {\@restore@latex@world}%
  \@temp@write@buffer}

\def\@gobble@iii#1#2#3{}
\def\@eval#1#2#3#4{%
  \begingroup
  \ifx#1\Cons         \let\@next\@next@apply%
  \else\ifx#1\Symbol  \let\@next\@next@symbol%
  \else               \gdef#4{#1{#2}}\let\@next\@gobble@iii
  \fi\fi\@next{#2}{#3}{#4}\let\@next\relax\endgroup}


\def\@get@type#1#2#3{\let#3#1}
\def\@next@apply#1#2#3{%
  \@@get@car{#1}\@temp@i
  \expandafter\@eval\@temp@i{#2}\@temp@i
  \def\@@next{\gdef#3{\Error}}%
  \expandafter\@get@type\@temp@i\@test@label
  \ifx\@test@label\Lambda
     \let\@@next\@@next@lambda%
  \else\ifx\@test@label\Quote
     \let\@@next\@@next@quote%
  \else\ifx\@test@label\Define
     \let\@@next\@@next@define%
  \else\ifx\@test@label\Func
     \let\@@next\@@next@func%
  \else\ifx\@test@label\Closure
     \let\@@next\@@next@closure%%
  \else\ifx\@test@label\If
     \let\@@next\@@next@if
  \fi\fi\fi\fi\fi\fi\@@next{#1}{#2}{#3}\let\@@next\relax}


\def\@next@symbol#1#2#3{%
      % concat currentenv ++ globalenv
      \def\@temp@env{#2}%
      \expandafter\expandafter\expandafter\def
      \expandafter\expandafter\expandafter\@temp@env
      \expandafter\expandafter\expandafter{%
      \expandafter\@temp@env\@globalenv}%
      \getassoc\@temp@env#1#3}


\def\@get@symbol#1#2{\ifx\#1\Symbol#2\else\fi}
\def\@create@closure\Symbol#1#2#3#4#5{\gdef#5{\Closure{#1,#2{#3},#4}}}
\def\@@next@lambda#1#2#3{%
   \@@get@cdr{#1}\@temp@i
   \expandafter\@get@car\@temp@i\@temp@ii % cadr -> \Symbol{\cs}
   \expandafter\@get@cdr\@temp@i\@temp@i
   \expandafter\@get@car\@temp@i\@temp@i  % caddr -> body
   \expandafter\expandafter\expandafter\@create@closure\expandafter\@temp@ii\@temp@i{#2}#3}


\def\@@next@quote#1#2#3{%
    \@@get@cdr{#1}\@temp@i
    \expandafter\@get@car\@temp@i\@temp@i
    \expandafter\gdef\expandafter#3\expandafter{\@temp@i}}


\def\@modify@genv\Symbol#1#2#3{\addassoc\@globalenv#1{#2{#3}}}
\def\@@next@define#1#2#3{%
   \@@get@cdr{#1}\@temp@i
   \expandafter\@get@car\@temp@i\@temp@ii % cadr -> \Symbol{\cs}
   \expandafter\@get@cdr\@temp@i\@temp@i
   \expandafter\@get@car\@temp@i\@temp@i  % caddr -> body
   \let\@save@ii\@temp@ii
   \expandafter\@eval\@temp@i{#2}\@temp@i
   \expandafter\expandafter\expandafter\@modify@genv\expandafter\@save@ii\@temp@i
   \gdef#3{\Nil}}

\def\@if@true{true}
\def\@if@false{false}
\def\@get@bool\Bool#1#2{\def#2{#1}}
\def\@@next@if#1#2#3{%
   \@@get@cdr{#1}\@temp@i
   \expandafter\@get@car\@temp@i\@temp@ii % cadr -> \Bool{value}
   \expandafter\@get@cdr\@temp@i\@temp@i
   \expandafter\@get@bool\@temp@ii\@temp@ii
   \ifx\@temp@ii\@if@false
      \expandafter\@get@cdr\@temp@i\@temp@i
   \fi
   \expandafter\@get@car\@temp@i\@temp@ii
   \expandafter\@eval\@temp@ii{#2}#3}

\newtoks\@args
\def\@@next@func#1#2#3{%
   \@@get@cdr{#1}\@temp@ii
   \@args{}%
   \let\@save\@temp@i % \@temp@i=\Func{\cs}
   \def\@@@next{%
     \expandafter\@get@type\@temp@ii\@test@label % \@test@label = type
     \ifx\Nil\@test@label
       \let\@@@next\relax
     \else
       \expandafter\@get@car\@temp@ii\@temp@iii
       \expandafter\@get@cdr\@temp@ii\@temp@ii
       \let\@save@ii\@temp@ii
       \expandafter\@eval\@temp@iii{#2}\@temp@iii
       \let\@temp@ii\@save@ii
       \expandafter\expandafter\expandafter\@args\expandafter\expandafter\expandafter{\expandafter\the\expandafter\@args\@temp@iii}%
     \fi\@@@next}\@@@next
   \expandafter\expandafter\expandafter\@apply@func\expandafter\@save\expandafter{\the\@args}#3} 

\def\@apply@func\Func#1#2#3{#1#3#2}


\def\@@next@closure#1#2#3{%
    \@@get@cdr{#1}\@temp@ii
    \expandafter\@get@car\@temp@ii\@temp@ii
    \let\@save\@temp@i
    \expandafter\@eval\@temp@ii{#2}\@temp@ii%
    \expandafter\expandafter\expandafter\@apply@closure\expandafter\@save\@temp@ii#3}

\def\@apply@closure\Closure#1#2#3#4{\@@apply@closure#1,#2{#3}#4}
\def\@@apply@closure#1,#2,#3,#4#5#6{%
  \@eval#2{#1{#4{#5}}#3}#6}
